"use strict";var e=require("chai");var t=require("pg-promise");var o=require("pg-monitor");require("exponential-backoff");var a=require("dotenv");var n=require("winston");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}require("bitcoin-computer-bitcore");var s=r(t);var i=r(o);r(a).default.config();const{PORT:l="3000",ZMQ_URL:S="tcp://litecoind:28332",CHAIN:R="LTC",NETWORK:E="regtest",BCN_ENV:_="dev",BCN_URL:O="http://127.0.0.1:3000",DEBUG_MODE:d="1",POSTGRES_USER:c="bcn",POSTGRES_PASSWORD:T="bcn",POSTGRES_DB:p="bcn",POSTGRES_HOST:P="127.0.0.1",POSTGRES_PORT:m="5432",RPC_PROTOCOL:f="http",RPC_USER:C="bcn-admin",RPC_PASSWORD:g="kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=",RPC_HOST:u="litecoind",RPC_PORT:b="19332",SERVER_VERSION:N="0.1",DEFAULT_WALLET:D="defaultwallet"}=process.env;const v=process.env.ALLOWED_RPC_METHODS?process.env.ALLOWED_RPC_METHODS.split(",").map((e=>new RegExp(e))):[];var L={PORT:parseInt(l,10),ZMQ_URL:S,CHAIN:R,NETWORK:E,BCN_ENV:_,BCN_URL:O,DEBUG_MODE:parseInt(d,10),POSTGRES_USER:c,POSTGRES_PASSWORD:T,POSTGRES_DB:p,POSTGRES_HOST:P,POSTGRES_PORT:parseInt(m,10),POSTGRES_MAX_PARAM_NUM:1e4,RPC_PROTOCOL:f,RPC_USER:C,RPC_PASSWORD:g,RPC_HOST:u,RPC_PORT:parseInt(b,10),SYNC_HEIGHT:1,SYNC_INTERVAL_CHECK:3e3,SERVER_VERSION:N,DB_CONNECTION_RETRY_TIME:500,SIGNATURE_FRESHNESS_MINUTES:3,DEFAULT_WALLET:D,ALLOWED_RPC_METHODS:v};const{DEBUG_MODE:G}=L;const A=n.createLogger({level:["error","warn","info","http","verbose","debug","silly"][G],format:n.format.json(),transports:[new n.transports.Console({format:n.format.combine(n.format.colorize(),n.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),n.format.printf((e=>`[2m${e.timestamp}[0m ${e.level} ${e.message}`)))})],exceptionHandlers:[new n.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new n.transports.File({filename:"logs/rejections.log"})]});const w={maxFiles:1,maxSize:1e5};G>=0&&A.add(new n.transports.File({filename:"error.log",level:"error"})),G>=1&&A.add(new n.transports.File({filename:"logs/warn.log",level:"warn",...w})),G>=2&&A.add(new n.transports.File({filename:"logs/info.log",level:"info",...w})),G>=3&&A.add(new n.transports.File({filename:"logs/http.log",level:"http",...w})),G>=4&&A.add(new n.transports.File({filename:"logs/verbose.log",level:"verbose",...w})),G>=5&&A.add(new n.transports.File({filename:"logs/debug.log",level:"debug",...w}));const{POSTGRES_HOST:M,POSTGRES_PORT:H,POSTGRES_DB:I,POSTGRES_USER:U,POSTGRES_PASSWORD:h,DB_CONNECTION_RETRY_TIME:B}=L;const W={error:(e,t)=>{if(t.cn){const{host:o,port:a,database:n,user:r,password:s}=t.cn;A.debug(`Waiting for db to start { message:${e.message} host:${o}, port:${a}, database:${n}, user:${r}, password: ${s}`)}},noWarnings:!0};"dev"===L.BCN_ENV&&L.DEBUG_MODE>0&&(i.default.isAttached()?i.default.detach():(i.default.attach(W),i.default.setTheme("matrix")));const F=s.default(W)({host:M,port:H,database:I,user:U,password:h,allowExitOnIdle:!0,idleTimeoutMillis:100});describe("db",(()=>{describe("getConnection",(()=>{it("Should establish a database connection",(async()=>{e.expect(F).to.not.be.undefined}))})),describe("getConnection",(()=>{it("Should establish a database connection",(async()=>{const t=await F.any('SELECT "rev" FROM "NonStandard" LIMIT 1');e.expect(t).to.not.be.undefined}))}))}));
