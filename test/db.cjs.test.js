"use strict";var e=require("chai");var t=require("pg-promise");var o=require("pg-monitor");require("exponential-backoff");var a=require("dotenv");var n=require("winston");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}require("bitcoin-computer-bitcore");var s=r(t);var l=r(o);r(a).default.config();const{PORT:i="3000",ZMQ_URL:S="tcp://litecoind:28332",CHAIN:R="LTC",NETWORK:d="regtest",BCN_ENV:E="dev",BCN_URL:_="http://127.0.0.1:3000",DEBUG_MODE:c="1",POSTGRES_USER:O="bcn",POSTGRES_PASSWORD:T="bcn",POSTGRES_DB:P="bcn",POSTGRES_HOST:m="127.0.0.1",POSTGRES_PORT:p="5432",RPC_PROTOCOL:f="http",RPC_USER:u="bcn-admin",RPC_PASSWORD:C="kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=",RPC_HOST:g="litecoind",RPC_PORT:b="19332",SERVER_VERSION:N="0.1",DEFAULT_WALLET:v="defaultwallet"}=process.env;var G={PORT:parseInt(i,10),ZMQ_URL:S,CHAIN:R,NETWORK:d,BCN_ENV:E,BCN_URL:_,DEBUG_MODE:parseInt(c,10),POSTGRES_USER:O,POSTGRES_PASSWORD:T,POSTGRES_DB:P,POSTGRES_HOST:m,POSTGRES_PORT:parseInt(p,10),POSTGRES_MAX_PARAM_NUM:1e4,RPC_PROTOCOL:f,RPC_USER:u,RPC_PASSWORD:C,RPC_HOST:g,RPC_PORT:parseInt(b,10),SYNC_HEIGHT:1,SYNC_INTERVAL_CHECK:3e3,SERVER_VERSION:N,DB_CONNECTION_RETRY_TIME:500,SIGNATURE_FRESHNESS_MINUTES:3,DEFAULT_WALLET:v,allowedRPCMethods:[/^get/,/Accounts$/]};const{DEBUG_MODE:D}=G;const w=n.createLogger({level:["error","warn","info","http","verbose","debug","silly"][D],format:n.format.json(),transports:[new n.transports.Console({format:n.format.combine(n.format.colorize(),n.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),n.format.printf((e=>`[2m${e.timestamp}[0m ${e.level} ${e.message}`)))})],exceptionHandlers:[new n.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new n.transports.File({filename:"logs/rejections.log"})]});const A={maxFiles:1,maxSize:1e5};D>=0&&w.add(new n.transports.File({filename:"error.log",level:"error"})),D>=1&&w.add(new n.transports.File({filename:"logs/warn.log",level:"warn",...A})),D>=2&&w.add(new n.transports.File({filename:"logs/info.log",level:"info",...A})),D>=3&&w.add(new n.transports.File({filename:"logs/http.log",level:"http",...A})),D>=4&&w.add(new n.transports.File({filename:"logs/verbose.log",level:"verbose",...A})),D>=5&&w.add(new n.transports.File({filename:"logs/debug.log",level:"debug",...A}));const{POSTGRES_HOST:I,POSTGRES_PORT:U,POSTGRES_DB:h,POSTGRES_USER:L,POSTGRES_PASSWORD:M,DB_CONNECTION_RETRY_TIME:H}=G;const B={error:(e,t)=>{if(t.cn){const{host:o,port:a,database:n,user:r,password:s}=t.cn;w.debug(`Waiting for db to start { message:${e.message} host:${o}, port:${a}, database:${n}, user:${r}, password: ${s}`)}},noWarnings:!0};"dev"===G.BCN_ENV&&G.DEBUG_MODE>0&&(l.default.isAttached()?l.default.detach():(l.default.attach(B),l.default.setTheme("matrix")));const F=s.default(B)({host:I,port:U,database:h,user:L,password:M,allowExitOnIdle:!0,idleTimeoutMillis:100});describe("db",(()=>{describe("getConnection",(()=>{it("Should establish a database connection",(async()=>{e.expect(F).to.not.be.undefined}))})),describe("getConnection",(()=>{it("Should establish a database connection",(async()=>{const t=await F.any('SELECT "rev" FROM "NonStandard" LIMIT 1');e.expect(t).to.not.be.undefined}))}))}));
