"use strict";var t=require("body-parser");var e=require("cors");var r=require("express");var a=require("http");var s=require("zeromq");var n=require("express-rate-limit");var o=require("dotenv");var i=require("winston");var c=require("bitcoin-computer-bitcore");var d=require("pg-promise");var l=require("pg-monitor");var u=require("exponential-backoff");var p=require("bitcoin-computer-lib");var f=require("fs");var h=require("bitcoind-rpc");var m=require("util");var g=require("elliptic");var y=require("hash.js");var S=require("path");function w(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}function E(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var a=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,a.get?a:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var R=w(t);var T=w(e);var v=w(r);var $=w(a);var O=E(s);var b=w(n);var P=w(o);var N=w(d);var _=w(l);var x=w(f);var C=w(h);var I=w(m);var A=w(y);var H=w(S);P.default.config();const{PORT:M="3000",ZMQ_URL:j="tcp://litecoind:28332",CHAIN:B="LTC",NETWORK:L="regtest",BCN_ENV:U="dev",BCN_URL:D="http://127.0.0.1:3000",DEBUG_MODE:F="1",POSTGRES_USER:G="bcn",POSTGRES_PASSWORD:k="bcn",POSTGRES_DB:W="bcn",POSTGRES_HOST:q="127.0.0.1",POSTGRES_PORT:K="5432",RPC_PROTOCOL:V="http",RPC_USER:Y="bcn-admin",RPC_PASSWORD:z="kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=",RPC_HOST:J="litecoind",RPC_PORT:Z="19332",SERVER_VERSION:Q="0.1",DEFAULT_WALLET:X="defaultwallet"}=process.env;var tt={PORT:parseInt(M,10),ZMQ_URL:j,CHAIN:B,NETWORK:L,BCN_ENV:U,BCN_URL:D,DEBUG_MODE:parseInt(F,10),POSTGRES_USER:G,POSTGRES_PASSWORD:k,POSTGRES_DB:W,POSTGRES_HOST:q,POSTGRES_PORT:parseInt(K,10),POSTGRES_MAX_PARAM_NUM:1e4,RPC_PROTOCOL:V,RPC_USER:Y,RPC_PASSWORD:z,RPC_HOST:J,RPC_PORT:parseInt(Z,10),SYNC_HEIGHT:1,SYNC_INTERVAL_CHECK:3e3,SERVER_VERSION:Q,DB_CONNECTION_RETRY_TIME:500,SIGNATURE_FRESHNESS_MINUTES:3,DEFAULT_WALLET:X,allowedRPCMethods:[/^get/,/Accounts$/]};const{DEBUG_MODE:et}=tt;const rt=i.createLogger({level:["error","warn","info","http","verbose","debug","silly"][et],format:i.format.json(),transports:[new i.transports.Console({format:i.format.combine(i.format.colorize(),i.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),i.format.printf((t=>`[2m${t.timestamp}[0m ${t.level} ${t.message}`)))})],exceptionHandlers:[new i.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new i.transports.File({filename:"logs/rejections.log"})]});const at={maxFiles:1,maxSize:1e5};et>=0&&rt.add(new i.transports.File({filename:"error.log",level:"error"})),et>=1&&rt.add(new i.transports.File({filename:"logs/warn.log",level:"warn",...at})),et>=2&&rt.add(new i.transports.File({filename:"logs/info.log",level:"info",...at})),et>=3&&rt.add(new i.transports.File({filename:"logs/http.log",level:"http",...at})),et>=4&&rt.add(new i.transports.File({filename:"logs/verbose.log",level:"verbose",...at})),et>=5&&rt.add(new i.transports.File({filename:"logs/debug.log",level:"debug",...at}));const st=()=>"dev"===tt.BCN_ENV;const nt=()=>tt.DEBUG_MODE>=6;const ot=(t,e)=>{if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++){const a=t[r];const s=Object.keys(a);let n=!1;for(let t=0;t<e.length;t++){const r=e[t];const o=Object.keys(r);if(s.length===o.length&&s.every((t=>o.includes(t)))&&s.every((t=>a[t]===r[t]))){n=!0;break}}if(!n)return!1}return!0};const it=t=>new Promise((e=>{setTimeout(e,t)}));const ct=(t,e)=>Object.assign(new Array(e).fill(null),t);const{POSTGRES_HOST:dt,POSTGRES_PORT:lt,POSTGRES_DB:ut,POSTGRES_USER:pt,POSTGRES_PASSWORD:ft,DB_CONNECTION_RETRY_TIME:ht}=tt;const mt={error:(t,e)=>{if(e.cn){const{host:r,port:a,database:s,user:n,password:o}=e.cn;rt.debug(`Waiting for db to start { message:${t.message} host:${r}, port:${a}, database:${s}, user:${n}, password: ${o}`)}},noWarnings:!0};st()&&tt.DEBUG_MODE>0&&(_.default.isAttached()?_.default.detach():(_.default.attach(mt),_.default.setTheme("matrix")));const gt=N.default(mt)({host:dt,port:lt,database:ut,user:pt,password:ft,allowExitOnIdle:!0,idleTimeoutMillis:100});class yt{static async select(t){const e=new d.PreparedStatement({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return gt.oneOrNone(e)}static async insert({id:t,data:e}){const r=new d.PreparedStatement({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return gt.none(r)}static async delete(t){const e=new d.PreparedStatement({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await gt.any(e))[0].count>0}}class St{static async select(t){const e=await yt.select(t);return(null==e?void 0:e.data)||null}static async insert(t){return yt.insert(t)}static async delete(t){return yt.delete(t)}}const{crypto:wt}=c.Bitcoin;const Et=v.default.Router();Et.get("/:id",(async({params:{id:t},url:e,method:r},a)=>{void 0===a.locals.authToken&&(rt.error(`Authorization failed at ${r} ${e}.`),a.status(403).json({error:`Authorization failed at ${r} ${e}.`}));try{const e=await St.select(t);e?a.status(200).json(e):a.status(403).json({error:"No entry found."})}catch(t){rt.error(`GET ${e} failed with error '${t.message}'`),a.status(500).json({error:t.message})}})),Et.post("/",(async(t,e)=>{const{body:{data:r},url:a}=t;try{const a=wt.Hash.sha256(Buffer.from(r)).toString("hex");await St.insert({id:a,data:r});const s=`${t.protocol}://${t.get("host")}/store/${a}`;e.status(201).json({_url:s})}catch(t){rt.error(`POST ${a} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),Et.delete("/:id",(async({params:{id:t},url:e,method:r},a)=>{st()||(rt.error(`Authorization failed at ${r} ${e}.`),a.status(403).json({error:`Authorization failed at ${r} ${e}.`}));try{await St.delete(t)?a.status(204).send():a.status(403).json({error:"No entry found."})}catch(t){rt.error(`DELETE ${e} failed with error '${t.message}'`),a.status(500).json({error:t.message})}}));class Rt{static async select(){return gt.one('SELECT "syncedHeight", "bitcoindSyncedHeight", "bitcoindSyncedProgress" FROM "Sync"')}static async update({syncedHeight:t,bitcoindSyncedHeight:e,bitcoindSyncedProgress:r}){const a=new d.PreparedStatement({name:`Sync.update.${Math.random()}`,text:'UPDATE "Sync" SET "syncedHeight" = $1, "bitcoindSyncedHeight" = $2, "bitcoindSyncedProgress" = $3',values:[t,e,r]});await gt.any(a)}}var Tt=async()=>class{static async select(){return Rt.select()}static async update(t){await Rt.update(t)}}.select();const vt={protocol:tt.RPC_PROTOCOL,user:tt.RPC_USER,pass:tt.RPC_PASSWORD,host:tt.RPC_HOST,port:tt.RPC_PORT};const $t=new C.default(vt);const Ot={createwallet:I.default.promisify(C.default.prototype.createwallet.bind($t)),generateToAddress:I.default.promisify(C.default.prototype.generateToAddress.bind($t)),getaddressinfo:I.default.promisify(C.default.prototype.getaddressinfo.bind($t)),getBlock:I.default.promisify(C.default.prototype.getBlock.bind($t)),getBlockchainInfo:I.default.promisify(C.default.prototype.getBlockchainInfo.bind($t)),getBlockHash:I.default.promisify(C.default.prototype.getBlockHash.bind($t)),getRawTransaction:I.default.promisify(C.default.prototype.getRawTransaction.bind($t)),getTransaction:I.default.promisify(C.default.prototype.getTransaction.bind($t)),importaddress:I.default.promisify(C.default.prototype.importaddress.bind($t)),listunspent:I.default.promisify(C.default.prototype.listunspent.bind($t)),sendRawTransaction:I.default.promisify(C.default.prototype.sendRawTransaction.bind($t))};class bt{static async getTransaction(t){const{result:e}=await Ot.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>Ot.getRawTransaction(t))))).map((t=>t.result))}static async sendRawTransaction(t){const{result:e,error:r}=await Ot.sendRawTransaction(t);if(r)throw rt.error(r),new Error("Error sending transaction");return e}}class Pt{static async select(t){const e=new d.PreparedStatement({name:`Standard.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Standard" WHERE "address" = $1 AND "spent" = FALSE',values:[t]});return(await gt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,!1]));for(;e.length;){const t=e.splice(0,tt.POSTGRES_MAX_PARAM_NUM);const r=[];for(let e=1;e<=t.length;e+=5)r.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const a=r.join(",");const s=new d.PreparedStatement({name:`Standard.insert.${Math.random()}`,text:`INSERT INTO "Standard"("rev", "address", "satoshis", "scriptPubKey", "spent") VALUES ${a}  ON CONFLICT DO NOTHING`,values:t});await gt.none(s)}}static async update(t){const e=t.flatMap((t=>[`${t.prevTxId.toString("hex")}/${t.outputIndex}`]));if(0===e.length)return[];const r=[];for(let t=1;t<=e.length;t+=1)r.push(`("rev" = $${t})`);const a=r.join(" OR ");const s=new d.PreparedStatement({name:`Standard.update.${Math.random()}`,text:`UPDATE "Standard" SET "spent" = TRUE WHERE ${a} RETURNING "rev"`,values:e});return gt.any(s)}static async getBalance(t){const e=new d.PreparedStatement({name:`Standard.getBalance.${Math.random()}`,text:'SELECT SUM("satoshis") FROM "Standard" WHERE "address" = $1 AND "spent" = FALSE',values:[t]});const r=await gt.oneOrNone(e);return parseInt(null==r?void 0:r.sum,10)||0}}class Nt{static async select(t){return(await Pt.select(t)).map((t=>({...t,amount:t.satoshis/1e8})))}static async getBalance(t){return Pt.getBalance(t)}static async insert(t){const e=t.map((t=>({rev:`${t.txId}/${t.outputIndex}`,address:t.address.toString("legacy"),satoshis:t.satoshis,scriptPubKey:t.script.toHex(),spent:!1})));return Pt.insert(e)}}const{Script:_t,Transaction:xt}=c.Bitcoin;const{Transaction:Ct}=c.Bitcoin;const{Input:It}=Ct;class At{static async query(t){const{publicKey:e,classHash:r}=t;if(void 0===e&&void 0===r)return[];let a='SELECT "rev"\n      FROM "NonStandard"\n      WHERE "spent" = FALSE';const s=[];e&&(s.push(e),a+=' AND $1 = ANY ("publicKeys")'),r&&(s.push(r),a+=` AND "classHash" = $${s.length}`);const n=new d.PreparedStatement({name:`NonStandard.query.${Math.random()}`,text:a,values:s});return(await gt.any(n)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:r,classHash:a}){const s=new d.PreparedStatement({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "classHash", "spent") VALUES ($1, $2, $3, $4, FALSE) ON CONFLICT DO NOTHING',values:[t,e,r,a]});await gt.none(s)}static async update(t){const e=new d.PreparedStatement({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "spent" = TRUE WHERE "rev" = $1 AND "spent" = FALSE',values:[t]});return gt.none(e)}static async getRevsByIds(t){const e=new d.PreparedStatement({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1) AND "spent" = FALSE',values:[[t]]});return gt.any(e)}static async select(t){const e=new d.PreparedStatement({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "classHash" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return gt.oneOrNone(e)}}class Ht{static async select(t){return At.select(t)}static async query(t){return At.query(t)}static async getRevsByIds(t){return At.getRevsByIds(t)}static async insert(t){return At.insert(t)}static async update(t){return At.update(t)}}const{crypto:Mt}=c.Bitcoin;const{CHAIN:jt,NETWORK:Bt,BCN_URL:Lt}=tt;const Ut=new p.Computer({chain:jt,network:Bt,url:Lt});const Dt=t=>t.tx.inputs.map((t=>c.Bitcoin.Transaction.Input.fromObject({...t,script:t._scriptBuffer}))).filter((t=>!t.isNull()));const Ft=async t=>{const e=Dt(t);if(e.length>0){const r=await(async t=>{const e=Dt(t);let r=[];return e.length>0&&(r=await(async t=>{const e=await class{static async areSpent(t){return class{static async areSpent(t){const e=t.map((t=>`('${t.prevTxId.toString("hex")}/${t.outputIndex}')`)).join(",");const r=new d.PreparedStatement({name:`Utxos.areSpent.${Math.random()}`,text:`SELECT "rev", "stSpent", "nstSpent" from "Utxos"  WHERE "rev" IN (${e})`});return gt.any(r)}}.areSpent(t)}}.areSpent(t);return e})(e)),r})(t);const a=e.flatMap((t=>{const e=`${t.prevTxId.toString("hex")}/${t.outputIndex}`;return r.some((t=>t.rev===e))?[]:[t]}));await Promise.all(a.map((async t=>{const e=await(async t=>await bt.getTransaction(t))(t.prevTxId.toString("hex"));const r=await Ut.db.fromTxId(e.id);await Ft(r)})))}await(async(t,e)=>{const r=t.flatMap(((t,r)=>{const a=_t.fromBuffer(t._scriptBuffer);const{PUBKEYHASH_OUT:s,SCRIPTHASH_OUT:n}=_t.types;if(![s,n].includes(a.classify()))return[];const o=a.toAddress(tt.NETWORK).toString("legacy");const i=a.toHex();const c=t.satoshis/1e8;const d=Math.round(t.satoshis);return[new xt.UnspentOutput({address:o,txId:e,outputIndex:r,scriptPubKey:i,amount:c,satoshis:d})]}));await Nt.insert(r)})(t.tx.outputs,t.txId),await(async t=>{const e=t.map((t=>It.fromObject({...t,script:t._scriptBuffer}))).filter((t=>!t.isNull()));return Pt.update(e)})(t.tx.inputs);const{inRevs:r=[],outRevs:a=[],outData:s=[]}=t;await(async(t,e,r)=>{const a=Math.max(t.length,e.length);const s=ct(t,a);const n=ct(e,a);const o=(i=n,s.map(((t,e)=>[t,i[e]])));var i;await Promise.all(o.map((async([t,e],a)=>{const{__cls:s="",_owners:n=[]}=r[a]||{};if(null===t&&e)return/^[0-9A-Fa-f]{64}\/\d+$/.test(e),void await Ht.insert({id:e,rev:e,publicKeys:n,classHash:Mt.Hash.sha256(Buffer.from(s)).toString("hex")});if(e&&t){const{id:r="",classHash:a=""}=await Ht.select(t)||{};await Ht.insert({id:r,classHash:a,rev:e,publicKeys:n}),await Ht.update(t)}})))})(r,a,s)};const Gt=async t=>{try{const e=t.toString("hex");rt.info(`ZMQ message { rawTx:${e} }`),"dev"===tt.BCN_ENV&&x.default.appendFileSync("zmqlog.log",`${e} \r\n`);const r=await Ut.db.fromTxHex(e);try{await Ft(r)}catch(t){rt.error(`Error parsing transaction ${t.message}`)}}catch(t){rt.error(`RawTxSubscriber failed with error '${t.message}'`)}};var kt=async t=>Nt.select(t);var Wt=async t=>await bt.getBulkTransactions(t);var qt=async t=>(void 0===(await Ot.getaddressinfo(t)).result.timestamp&&(rt.info(`Importing address: ${t}`),await Ot.importaddress(t,!1)),(await Ot.listunspent(0,999999,[t])).result);const Kt={protocol:tt.RPC_PROTOCOL,user:tt.RPC_USER,pass:tt.RPC_PASSWORD,host:tt.RPC_HOST,port:tt.RPC_PORT};const Vt=new C.default(Kt);const Yt={};const zt=JSON.parse(JSON.stringify(C.default.callspec));const Jt={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(C.default.prototype).forEach((t=>{t&&"function"==typeof C.default.prototype[t]&&(Yt[t]=I.default.promisify(C.default.prototype[t].bind(Vt)))}))}catch(t){rt.error(`Error occurred while binding RPC methods: ${t.message}`)}const Zt=new g.ec("secp256k1");const Qt=v.default();let Xt;try{Xt=$.default.createServer(Qt)}catch(t){throw rt.error(`Starting server failed with error '${t.message}'`),t}if(rt.info(`Server listening on port ${tt.PORT}`),Qt.use(T.default()),"dev"!==tt.BCN_ENV){const t=b.default({windowMs:9e5,max:300,standardHeaders:!0,legacyHeaders:!1});Qt.use(t)}Qt.use(R.default.json({limit:"100mb"})),Qt.use(R.default.urlencoded({limit:"100mb",extended:!0})),Qt.use((async(t,e,r)=>{try{const a=t.get("Authentication");if(!a)return void r();const s=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const r=Buffer.from(e[1],"base64").toString().split(":");if(3!==r.length)throw new Error;return{signature:r[0],publicKey:r[1],timestamp:parseInt(r[2],10)}})(a);const{signature:n,publicKey:o,timestamp:i}=s;if(Date.now()-i>1e3*tt.SIGNATURE_FRESHNESS_MINUTES*60)return void e.status(401).json({error:"Signature is too old."});const c=A.default.sha256().update(tt.BCN_URL+i).digest("hex");if(!Zt.keyFromPublic(o,"hex").verify(c,n))return void e.status(401).json({error:"The origin and public key pair doesn't match the signature."});e.locals.authToken=s,r()}catch(t){rt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),Qt.use((({url:t},e,r)=>{if(void 0!==e.locals.authToken)try{let t;try{const e=st()?"bcn.test.config.json":"bcn.config.json";t=x.default.readFileSync(H.default.join(__dirname,"..","..",e))}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void r();throw rt.error(`Access-list failed with error '${t.message}'`),t}const{blacklist:a,whitelist:s}=JSON.parse(t.toString());if(a&&s)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:n}=e.locals.authToken;if(s&&!s.includes(n)||a&&a.includes(n))return void e.status(403).json({error:`Public key ${n} is not allowed.`});r()}catch(r){rt.error(`Authorization failed at ${t} with error: '${r.message}'`),e.status(403).json({error:r.message})}else r()}));const te=(()=>{const t=v.default.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},r)=>{try{const{address:e}=t;const a=await kt(e);const s=a.map((({satoshis:t,rev:e})=>{const[r,a]=e.split("/");return{amount:t/1e8,txid:r,vout:parseInt(a,10)}}));if(nt()){let t=[];let r=!1;let a=10;do{try{t=await qt(e)||[],r=!0}catch(t){rt.debug(`Retrying to get utxos '${t.message}'`),await it(1e3),a-=1}}while(!r&&a>0);const n=t.map((({amount:t,txid:e,vout:r})=>({amount:t,txid:e,vout:r})));ot(s,n)||(rt.error(`Inconsistency on UTXO set calculation for address ${e}.`),rt.error(`db utxos ${JSON.stringify(s,null,2)} rpc utxos ${JSON.stringify(n,null,2)}`),rt.error(`db utxos length ${s.length} rpc utxos length: ${n.length}`))}r.status(200).json(a)}catch(t){rt.error(`GET ${e} failed with error '${t.message}'`),r.status(404).json({error:t.message})}})),t.get("/non-standard-utxos",(async({query:t,url:e},r)=>{try{const e=await(async t=>Ht.query(t))(t);r.status(200).json(e)}catch(t){rt.error(`GET ${e} failed with error '${t.messages}'`),r.status(404).json({error:t.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},r)=>{try{const{address:a}=t;const s=await kt(a);const n=await(async t=>Nt.getBalance(t))(a);const o=s.map((({satoshis:t,rev:e})=>{const[r,a]=e.split("/");return{amount:t/1e8,txid:r,vout:parseInt(a,10)}}));if(nt()){let t=[];let r=!1;let s=10;do{try{t=await qt(a)||[],r=!0}catch(t){rt.debug(`Retrying ${e} getStandardUtxosAction: ${t.message}`),await it(1e3),s-=1}}while(!r&&s>0);const i=1e8*t.reduce(((t,e)=>t+e.amount),0);const c=t.map((({amount:t,txid:e,vout:r})=>({amount:t,txid:e,vout:r})));n===Math.round(i)&&ot(o,c)||(rt.error(`Inconsistency on balance calculation for address ${a}: dbBalance ${n} rpcBalance: ${i}`),rt.error(`db utxos ${o}`),rt.error(`rpc utxos: ${JSON.stringify(o)}`))}r.status(200).json(n)}catch(t){rt.error(`GET ${e} failed with error '${t.message}'`),r.status(404).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},r)=>{try{if(void 0===t||0===t.length)return void r.status(500).json({error:"Missing input txIds."});const e=await Wt(t);e?r.status(200).json(e):r.status(404).json({error:"Not found"})}catch(t){rt.error(`POST ${e} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),t.post("/tx/send",(async({body:{rawTx:t},url:e},r)=>{try{const e=await(async t=>bt.sendRawTransaction(t))(t);await Gt(t),r.status(200).json(e)}catch(t){rt.error(`POST ${e} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},r)=>{try{if(void 0===t||0===t.length)return void r.status(404).json({error:"Missing input object ids."});const e=await(async t=>(await Ht.getRevsByIds(t)).map((t=>t.rev)))(t);r.status(200).json(e)}catch(t){rt.error(`POST ${e} failed with error '${t.message}'`),r.status(404).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},r)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!tt.allowedRPCMethods.some((e=>e.test(t.method))))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===zt[t]||null===zt[t])throw new Error("This RPC method does not exist, or not supported");const r=e.trim().split(" ");const a=zt[t].trim().split(" ");if(0===e.trim().length&&0!==zt[t].trim().length)throw new Error(`Too few params provided. Expected ${a.length} Provided 0`);if(0!==e.trim().length&&0===zt[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${r.length}`);if(r.length<a.length)throw new Error(`Too few params provided. Expected ${a.length} Provided ${r.length}`);if(r.length>a.length)throw new Error(`Too many params provided. Expected ${a.length} Provided ${r.length}`);return 0===e.length?[]:r.map(((t,e)=>Jt[a[e]](t)))}(t.method,t.params);const a=e.length?await Yt[t.method](...e):await Yt[t.method]();return void r.status(200).json({result:a})}catch(t){rt.error(`POST ${e} failed with error '${t.message}'`),r.status(404).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to bitcoin-computer-lib@0.7.7.0-beta or greater."})})),t.get("/tx/:txId",(async({params:t},e)=>{const{txId:r}=t;const[a]=await Wt([r]);a?e.status(200).json(a):e.status(404).json({error:"Not found"})})),t})();Qt.use(`/v1/${tt.CHAIN}/${tt.NETWORK}`,te),Qt.use("/v1/store",Et),Qt.get("/",((t,e)=>e.status(200).send("OK"))),Qt.get("/health",((t,e)=>e.status(200).send("healthy"))),Qt.get("/version",((t,e)=>e.status(200).send(tt.SERVER_VERSION))),Xt.listen(tt.PORT,(()=>{rt.info(`Rev ${tt.SERVER_VERSION} Started web server on port ${tt.PORT}`)}));const ee=new O.Subscriber;ee.connect(tt.ZMQ_URL),ee.subscribe("rawtx"),rt.info(`ZMQ Subscriber connected to ${tt.ZMQ_URL}`),(async()=>{await(async()=>{await u.backOff((()=>gt.connect()),{startingDelay:ht})})(),await(async t=>{try{await(async()=>{try{await Ot.createwallet(tt.DEFAULT_WALLET)}catch(t){rt.debug(`Wallet creation failed with error '${t.message}'`)}})(),"regtest"!==tt.NETWORK&&await(async()=>{let t=-1;let e=-1;let r=0;rt.info("Checking sync progress...syncedHeight: -1 from -1");do{({syncedHeight:t,bitcoindSyncedHeight:e,bitcoindSyncedProgress:r}=await Tt()),t>0?rt.info(`Sync progress ${t}/${e} blocks [${(t/e*100).toFixed(4)}% (bitcoind progress: ${(100*r).toFixed(4)}%)]`):rt.info(`Sync progress initializing... ${t}/${e} blocks `),await it(tt.SYNC_INTERVAL_CHECK)}while(t<e||r<.999);rt.info(`BCN reaches sync end...currentBlockHeight: ${t} from ${e} (chain progress: ${(100*r).toFixed(4)})`)})(),rt.info("Bitcoin Computer Node is ready");for await(const[,e]of t)await Gt(e)}catch(t){rt.error(`ZMQ subscription failed with error '${t.message}'`)}})(ee)})();
