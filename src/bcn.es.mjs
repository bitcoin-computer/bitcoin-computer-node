import t from"body-parser";import e from"cors";import s from"express";import r from"http";import*as a from"zeromq";import n from"express-rate-limit";import o from"dotenv";import{createLogger as i,format as c,transports as d}from"winston";import{Bitcoin as l}from"bitcoin-computer-bitcore";import u,{PreparedStatement as p}from"pg-promise";import m from"pg-monitor";import{backOff as h}from"exponential-backoff";import g from"fs";import y from"bitcoind-rpc";import S from"util";import{ec as f}from"elliptic";import E from"hash.js";import w from"path";o.config();const{PORT:R="3000",ZMQ_URL:T="tcp://litecoind:28332",CHAIN:$="LTC",NETWORK:O="regtest",BCN_ENV:v="dev",BCN_URL:N="http://127.0.0.1:3000",DEBUG_MODE:b="1",POSTGRES_USER:_="bcn",POSTGRES_PASSWORD:x="bcn",POSTGRES_DB:P="bcn",POSTGRES_HOST:C="127.0.0.1",POSTGRES_PORT:I="5432",RPC_PROTOCOL:A="http",RPC_USER:H="bcn-admin",RPC_PASSWORD:M="kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=",RPC_HOST:L="litecoind",RPC_PORT:j="19332",SERVER_VERSION:B="0.1",TESTING:D=!1,DEFAULT_WALLET:U="defaultwallet"}=process.env;const F=process.env.ALLOWED_RPC_METHODS?process.env.ALLOWED_RPC_METHODS.split(",").map((t=>new RegExp(t))):[];var G={PORT:parseInt(R,10),ZMQ_URL:T,CHAIN:$,NETWORK:O,BCN_ENV:v,BCN_URL:N,DEBUG_MODE:parseInt(b,10),POSTGRES_USER:_,POSTGRES_PASSWORD:x,POSTGRES_DB:P,POSTGRES_HOST:C,POSTGRES_PORT:parseInt(I,10),POSTGRES_MAX_PARAM_NUM:1e4,RPC_PROTOCOL:A,RPC_USER:H,RPC_PASSWORD:M,RPC_HOST:L,RPC_PORT:parseInt(j,10),SYNC_HEIGHT:1,SYNC_INTERVAL_CHECK:3e3,SERVER_VERSION:B,TESTING:D,DB_CONNECTION_RETRY_TIME:500,SIGNATURE_FRESHNESS_MINUTES:3,DEFAULT_WALLET:U,ALLOWED_RPC_METHODS:F};const{DEBUG_MODE:W}=G;const k=i({level:["error","warn","info","http","verbose","debug","silly"][W],format:c.json(),transports:[new d.Console({format:c.combine(c.colorize(),c.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),c.printf((t=>`[2m${t.timestamp}[0m ${t.level} ${t.message}`)))})],exceptionHandlers:[new d.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new d.File({filename:"logs/rejections.log"})]});const K={maxFiles:1,maxSize:1e5};W>=0&&k.add(new d.File({filename:"error.log",level:"error"})),W>=1&&k.add(new d.File({filename:"logs/warn.log",level:"warn",...K})),W>=2&&k.add(new d.File({filename:"logs/info.log",level:"info",...K})),W>=3&&k.add(new d.File({filename:"logs/http.log",level:"http",...K})),W>=4&&k.add(new d.File({filename:"logs/verbose.log",level:"verbose",...K})),W>=5&&k.add(new d.File({filename:"logs/debug.log",level:"debug",...K}));const V=()=>"dev"===G.BCN_ENV;const Y=()=>G.DEBUG_MODE>=6;const q=(t,e)=>{if(t.length!==e.length)return!1;for(let s=0;s<t.length;s++){const r=t[s];const a=Object.keys(r);let n=!1;for(let t=0;t<e.length;t++){const s=e[t];const o=Object.keys(s);if(a.length===o.length&&a.every((t=>o.includes(t)))&&a.every((t=>r[t]===s[t]))){n=!0;break}}if(!n)return!1}return!0};const z=t=>new Promise((e=>{setTimeout(e,t)}));const J=(t,e)=>Object.assign(new Array(e).fill(null),t);const{POSTGRES_HOST:Z,POSTGRES_PORT:Q,POSTGRES_DB:X,POSTGRES_USER:tt,POSTGRES_PASSWORD:et,DB_CONNECTION_RETRY_TIME:st}=G;const rt={error:(t,e)=>{if(e.cn){const{host:s,port:r,database:a,user:n,password:o}=e.cn;k.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${r}, database:${a}, user:${n}, password: ${o}`)}},noWarnings:!0};V()&&G.DEBUG_MODE>0&&(m.isAttached()?m.detach():(m.attach(rt),m.setTheme("matrix")));const at=u(rt)({host:Z,port:Q,database:X,user:tt,password:et,allowExitOnIdle:!0,idleTimeoutMillis:100});class nt{static async select(t){const e=new p({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return at.oneOrNone(e)}static async insert({id:t,data:e}){const s=new p({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return at.none(s)}static async delete(t){const e=new p({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await at.any(e))[0].count>0}}class ot{static async select(t){const e=await nt.select(t);return(null==e?void 0:e.data)||null}static async insert(t){return nt.insert(t)}static async delete(t){return nt.delete(t)}}const{crypto:it}=l;const ct=s.Router();ct.get("/:id",(async({params:{id:t},url:e,method:s},r)=>{void 0===r.locals.authToken&&(k.error(`Authorization failed at ${s} ${e}.`),r.status(403).json({error:`Authorization failed at ${s} ${e}.`}));try{const e=await ot.select(t);e?r.status(200).json(e):r.status(403).json({error:"No entry found."})}catch(t){k.error(`GET ${e} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),ct.post("/",(async(t,e)=>{const{body:{data:s},url:r}=t;try{const r=it.Hash.sha256(Buffer.from(s)).toString("hex");await ot.insert({id:r,data:s});const a=`${t.protocol}://${t.get("host")}/store/${r}`;e.status(201).json({_url:a})}catch(t){k.error(`POST ${r} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),ct.delete("/:id",(async({params:{id:t},url:e,method:s},r)=>{V()||(k.error(`Authorization failed at ${s} ${e}.`),r.status(403).json({error:`Authorization failed at ${s} ${e}.`}));try{await ot.delete(t)?r.status(204).send():r.status(403).json({error:"No entry found."})}catch(t){k.error(`DELETE ${e} failed with error '${t.message}'`),r.status(500).json({error:t.message})}}));class dt{static async select(){return at.one('SELECT "syncedHeight", "bitcoindSyncedHeight", "bitcoindSyncedProgress" FROM "Sync"')}static async update({syncedHeight:t,bitcoindSyncedHeight:e,bitcoindSyncedProgress:s}){const r=new p({name:`Sync.update.${Math.random()}`,text:'UPDATE "Sync" SET "syncedHeight" = $1, "bitcoindSyncedHeight" = $2, "bitcoindSyncedProgress" = $3',values:[t,e,s]});await at.any(r)}}var lt=async()=>class{static async select(){return dt.select()}static async update(t){await dt.update(t)}}.select();const ut={protocol:G.RPC_PROTOCOL,user:G.RPC_USER,pass:G.RPC_PASSWORD,host:G.RPC_HOST,port:G.RPC_PORT};const pt=new y(ut);const mt={createwallet:S.promisify(y.prototype.createwallet.bind(pt)),generateToAddress:S.promisify(y.prototype.generateToAddress.bind(pt)),getaddressinfo:S.promisify(y.prototype.getaddressinfo.bind(pt)),getBlock:S.promisify(y.prototype.getBlock.bind(pt)),getBlockchainInfo:S.promisify(y.prototype.getBlockchainInfo.bind(pt)),getBlockHash:S.promisify(y.prototype.getBlockHash.bind(pt)),getRawTransaction:S.promisify(y.prototype.getRawTransaction.bind(pt)),getTransaction:S.promisify(y.prototype.getTransaction.bind(pt)),importaddress:S.promisify(y.prototype.importaddress.bind(pt)),listunspent:S.promisify(y.prototype.listunspent.bind(pt)),sendRawTransaction:S.promisify(y.prototype.sendRawTransaction.bind(pt))};class ht{static async select(t){const e=new p({name:`Standard.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Standard" WHERE "address" = $1 AND "spent" = FALSE',values:[t]});return(await at.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,!1]));for(;e.length;){const t=e.splice(0,G.POSTGRES_MAX_PARAM_NUM);const s=[];for(let e=1;e<=t.length;e+=5)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const r=s.join(",");const a=new p({name:`Standard.insert.${Math.random()}`,text:`INSERT INTO "Standard"("rev", "address", "satoshis", "scriptPubKey", "spent") VALUES ${r}  ON CONFLICT DO NOTHING`,values:t});await at.none(a)}}static async update(t){const e=t.flatMap((t=>[`${t.prevTxId.toString("hex")}/${t.outputIndex}`]));if(0===e.length)return[];const s=[];for(let t=1;t<=e.length;t+=1)s.push(`("rev" = $${t})`);const r=s.join(" OR ");const a=new p({name:`Standard.update.${Math.random()}`,text:`UPDATE "Standard" SET "spent" = TRUE WHERE ${r} RETURNING "rev"`,values:e});return at.any(a)}static async getBalance(t){const e=new p({name:`Standard.getBalance.${Math.random()}`,text:'SELECT SUM("satoshis") FROM "Standard" WHERE "address" = $1 AND "spent" = FALSE',values:[t]});const s=await at.oneOrNone(e);return parseInt(null==s?void 0:s.sum,10)||0}}class gt{static async select(t){return(await ht.select(t)).map((t=>({...t,amount:t.satoshis/1e8})))}static async getBalance(t){return ht.getBalance(t)}static async insert(t){const e=t.map((t=>({rev:`${t.txId}/${t.outputIndex}`,address:t.address.toString("legacy"),satoshis:t.satoshis,scriptPubKey:t.script.toHex(),spent:!1})));return ht.insert(e)}}const{Script:yt,Transaction:St}=l;const{Transaction:ft}=l;const{Input:Et}=ft;class wt{static async query(t){const{publicKey:e,classHash:s}=t;if(void 0===e&&void 0===s)return[];let r='SELECT "rev"\n      FROM "NonStandard"\n      WHERE "spent" = FALSE';const a=[];e&&(a.push(e),r+=' AND $1 = ANY ("publicKeys")'),s&&(a.push(s),r+=` AND "classHash" = $${a.length}`);const n=new p({name:`NonStandard.query.${Math.random()}`,text:r,values:a});return(await at.any(n)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:s,classHash:r}){const a=new p({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "classHash", "spent") VALUES ($1, $2, $3, $4, FALSE) ON CONFLICT DO NOTHING',values:[t,e,s,r]});await at.none(a)}static async update(t){const e=new p({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "spent" = TRUE WHERE "rev" = $1 AND "spent" = FALSE',values:[t]});return at.none(e)}static async getRevsByIds(t){const e=new p({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1) AND "spent" = FALSE',values:[[t]]});return at.any(e)}static async select(t){const e=new p({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "classHash" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return at.oneOrNone(e)}}class Rt{static async select(t){return wt.select(t)}static async query(t){return wt.query(t)}static async getRevsByIds(t){return wt.getRevsByIds(t)}static async insert(t){return wt.insert(t)}static async update(t){return wt.update(t)}}const{crypto:Tt}=l;class $t{static async getTransaction(t){const{result:e}=await mt.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>mt.getRawTransaction(t))))).map((t=>t.result))}static async sendRawTransaction(t){const{result:e,error:s}=await mt.sendRawTransaction(t);if(s)throw k.error(s),new Error("Error sending transaction");return e}}var Ot=async t=>await $t.getBulkTransactions(t);const{Computer:vt}=G.TESTING?require("@bitcoin-computer/lib-testing"):require("@bitcoin-computer/lib");const{CHAIN:Nt,NETWORK:bt,BCN_URL:_t}=G;const xt=new vt({chain:Nt,network:bt,url:_t});const Pt=t=>t.tx.inputs.map((t=>l.Transaction.Input.fromObject({...t,script:t._scriptBuffer}))).filter((t=>!t.isNull()));const Ct=async t=>{const e=Pt(t);if(e.length>0){const s=await(async t=>{const e=Pt(t);let s=[];return e.length>0&&(s=await(async t=>{const e=await class{static async areSpent(t){return class{static async areSpent(t){const e=t.map((t=>`('${t.prevTxId.toString("hex")}/${t.outputIndex}')`)).join(",");const s=new p({name:`Utxos.areSpent.${Math.random()}`,text:`SELECT "rev", "stSpent", "nstSpent" from "Utxos"  WHERE "rev" IN (${e})`});return at.any(s)}}.areSpent(t)}}.areSpent(t);return e})(e)),s})(t);const r=e.flatMap((t=>{const e=`${t.prevTxId.toString("hex")}/${t.outputIndex}`;return s.some((t=>t.rev===e))?[]:[t]}));await Promise.all(r.map((async t=>{try{k.info(`Repairing input:${t.prevTxId.toString("hex")}`);const[e]=await Ot([t.prevTxId.toString("hex")]);const s=await xt.db.fromHex(e);await Ct(s),k.info(`Repaired successfully input:${t.prevTxId.toString("hex")}`)}catch(e){k.error(`Error on repair input:${t.prevTxId.toString("hex")}`)}})))}await(async(t,e)=>{const s=t.flatMap(((t,s)=>{const r=yt.fromBuffer(t._scriptBuffer);const{PUBKEYHASH_OUT:a,SCRIPTHASH_OUT:n}=yt.types;if(![a,n].includes(r.classify()))return[];const o=r.toAddress(G.NETWORK).toString("legacy");const i=r.toHex();const c=t.satoshis/1e8;const d=Math.round(t.satoshis);return[new St.UnspentOutput({address:o,txId:e,outputIndex:s,scriptPubKey:i,amount:c,satoshis:d})]}));await gt.insert(s)})(t.tx.outputs,t.txId),await(async t=>{const e=t.map((t=>Et.fromObject({...t,script:t._scriptBuffer}))).filter((t=>!t.isNull()));return ht.update(e)})(t.tx.inputs);const{inRevs:s=[],outRevs:r=[],outData:a=[]}=t;await(async(t,e,s)=>{const r=Math.max(t.length,e.length);const a=J(t,r);const n=J(e,r);const o=(i=n,a.map(((t,e)=>[t,i[e]])));var i;await Promise.all(o.map((async([t,e],r)=>{const{__cls:a="",_owners:n=[]}=s[r]||{};if(null===t&&e)return/^[0-9A-Fa-f]{64}\/\d+$/.test(e),void await Rt.insert({id:e,rev:e,publicKeys:n,classHash:Tt.Hash.sha256(Buffer.from(a)).toString("hex")});if(e&&t){const{id:s="",classHash:r=""}=await Rt.select(t)||{};await Rt.insert({id:s,classHash:r,rev:e,publicKeys:n}),await Rt.update(t)}})))})(s,r,a)};const It=async t=>{try{const e=t.toString("hex");k.info(`ZMQ message { rawTx:${e} }`),"dev"===G.BCN_ENV&&g.appendFileSync("zmqlog.log",`${e} \r\n`);const s=await xt.db.fromTxHex(e);try{await Ct(s)}catch(t){k.error(`Error parsing transaction ${t.message} ${t.stack}`)}}catch(t){k.error(`RawTxSubscriber failed with error '${t.message} ${t.stack}'`)}};var At=async t=>gt.select(t);var Ht=async t=>(void 0===(await mt.getaddressinfo(t)).result.timestamp&&(k.info(`Importing address: ${t}`),await mt.importaddress(t,!1)),(await mt.listunspent(0,999999,[t])).result);const Mt={protocol:G.RPC_PROTOCOL,user:G.RPC_USER,pass:G.RPC_PASSWORD,host:G.RPC_HOST,port:G.RPC_PORT};const Lt=new y(Mt);const jt={};const Bt=JSON.parse(JSON.stringify(y.callspec));const Dt={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(y.prototype).forEach((t=>{t&&"function"==typeof y.prototype[t]&&(jt[t]=S.promisify(y.prototype[t].bind(Lt)))}))}catch(t){k.error(`Error occurred while binding RPC methods: ${t.message}`)}const Ut=new f("secp256k1");const Ft=s();let Gt;try{Gt=r.createServer(Ft)}catch(t){throw k.error(`Starting server failed with error '${t.message}'`),t}if(k.info(`Server listening on port ${G.PORT}`),Ft.use(e()),"dev"!==G.BCN_ENV){const t=n({windowMs:9e5,max:300,standardHeaders:!0,legacyHeaders:!1});Ft.use(t)}Ft.use(t.json({limit:"100mb"})),Ft.use(t.urlencoded({limit:"100mb",extended:!0})),Ft.use((async(t,e,s)=>{try{const r=t.get("Authentication");if(!r)return void s();const a=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(r);const{signature:n,publicKey:o,timestamp:i}=a;if(Date.now()-i>1e3*G.SIGNATURE_FRESHNESS_MINUTES*60)return void e.status(401).json({error:"Signature is too old."});const c=E.sha256().update(G.BCN_URL+i).digest("hex");if(!Ut.keyFromPublic(o,"hex").verify(c,n))return void e.status(401).json({error:"The origin and public key pair doesn't match the signature."});e.locals.authToken=a,s()}catch(t){k.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),Ft.use((({url:t},e,s)=>{if(void 0!==e.locals.authToken)try{let t;try{const e=V()?"bcn.test.config.json":"bcn.config.json";t=g.readFileSync(w.join(__dirname,"..","..",e))}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void s();throw k.error(`Access-list failed with error '${t.message}'`),t}const{blacklist:r,whitelist:a}=JSON.parse(t.toString());if(r&&a)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:n}=e.locals.authToken;if(a&&!a.includes(n)||r&&r.includes(n))return void e.status(403).json({error:`Public key ${n} is not allowed.`});s()}catch(s){k.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s()}));const Wt=(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;const r=await At(e);const a=r.map((({satoshis:t,rev:e})=>{const[s,r]=e.split("/");return{amount:t/1e8,txid:s,vout:parseInt(r,10)}}));if(Y()){let t=[];let s=!1;let r=10;do{try{t=await Ht(e)||[],s=!0}catch(t){k.debug(`Retrying to get utxos '${t.message}'`),await z(1e3),r-=1}}while(!s&&r>0);const n=t.map((({amount:t,txid:e,vout:s})=>({amount:t,txid:e,vout:s})));q(a,n)||(k.error(`Inconsistency on UTXO set calculation for address ${e}.`),k.error(`db utxos ${JSON.stringify(a,null,2)} rpc utxos ${JSON.stringify(n,null,2)}`),k.error(`db utxos length ${a.length} rpc utxos length: ${n.length}`))}s.status(200).json(r)}catch(t){k.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/non-standard-utxos",(async({query:t,url:e},s)=>{try{const e=await(async t=>Rt.query(t))(t);s.status(200).json(e)}catch(t){k.error(`GET ${e} failed with error '${t.messages}'`),s.status(404).json({error:t.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:r}=t;const a=await At(r);const n=await(async t=>gt.getBalance(t))(r);const o=a.map((({satoshis:t,rev:e})=>{const[s,r]=e.split("/");return{amount:t/1e8,txid:s,vout:parseInt(r,10)}}));if(Y()){let t=[];let s=!1;let a=10;do{try{t=await Ht(r)||[],s=!0}catch(t){k.debug(`Retrying ${e} getStandardUtxosAction: ${t.message}`),await z(1e3),a-=1}}while(!s&&a>0);const i=1e8*t.reduce(((t,e)=>t+e.amount),0);const c=t.map((({amount:t,txid:e,vout:s})=>({amount:t,txid:e,vout:s})));n===Math.round(i)&&q(o,c)||(k.error(`Inconsistency on balance calculation for address ${r}: dbBalance ${n} rpcBalance: ${i}`),k.error(`db utxos ${o}`),k.error(`rpc utxos: ${JSON.stringify(o)}`))}s.status(200).json(n)}catch(t){k.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(500).json({error:"Missing input txIds."});const e=await Ot(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){k.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/send",(async({body:{rawTx:t},url:e},s)=>{try{const e=await(async t=>$t.sendRawTransaction(t))(t);await It(t),s.status(200).json(e)}catch(t){k.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(404).json({error:"Missing input object ids."});const e=await(async t=>(await Rt.getRevsByIds(t)).map((t=>t.rev)))(t);s.status(200).json(e)}catch(t){k.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!G.ALLOWED_RPC_METHODS.some((e=>e.test(t.method))))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===Bt[t]||null===Bt[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const r=Bt[t].trim().split(" ");if(0===e.trim().length&&0!==Bt[t].trim().length)throw new Error(`Too few params provided. Expected ${r.length} Provided 0`);if(0!==e.trim().length&&0===Bt[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<r.length)throw new Error(`Too few params provided. Expected ${r.length} Provided ${s.length}`);if(s.length>r.length)throw new Error(`Too many params provided. Expected ${r.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>Dt[r[e]](t)))}(t.method,t.params);const r=e.length?await jt[t.method](...e):await jt[t.method]();return void s.status(200).json({result:r})}catch(t){k.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to bitcoin-computer-lib@0.7.7.0-beta or greater."})})),t.get("/tx/:txId",(async({params:t},e)=>{const{txId:s}=t;const[r]=await Ot([s]);r?e.status(200).json(r):e.status(404).json({error:"Not found"})})),t})();Ft.use(`/v1/${G.CHAIN}/${G.NETWORK}`,Wt),Ft.use("/v1/store",ct),Ft.get("/",((t,e)=>e.status(200).send("OK"))),Ft.get("/health",((t,e)=>e.status(200).send("healthy"))),Ft.get("/version",((t,e)=>e.status(200).send(G.SERVER_VERSION))),Gt.listen(G.PORT,(()=>{k.info(`Rev ${G.SERVER_VERSION} Started web server on port ${G.PORT}`)}));const kt=new a.Subscriber;kt.connect(G.ZMQ_URL),kt.subscribe("rawtx"),k.info(`ZMQ Subscriber connected to ${G.ZMQ_URL}`),(async()=>{await(async()=>{await h((()=>at.connect()),{startingDelay:st})})(),await(async t=>{try{await(async()=>{try{await mt.createwallet(G.DEFAULT_WALLET)}catch(t){k.debug(`Wallet creation failed with error '${t.message}'`)}})(),"regtest"!==G.NETWORK&&await(async()=>{let t=-1;let e=-1;let s=0;k.info("Checking sync progress...syncedHeight: -1 from -1");do{({syncedHeight:t,bitcoindSyncedHeight:e,bitcoindSyncedProgress:s}=await lt()),t>0?k.info(`Sync progress ${t}/${e} blocks [${(t/e*100).toFixed(4)}% (bitcoind progress: ${(100*s).toFixed(4)}%)]`):k.info(`Sync progress initializing... ${t}/${e} blocks `),await z(G.SYNC_INTERVAL_CHECK)}while(t<e||s<.999);k.info(`BCN reaches sync end...currentBlockHeight: ${t} from ${e} (chain progress: ${(100*s).toFixed(4)})`)})(),G.TESTING?k.info(`Bitcoin Computer Node is ready on testing ${G.SERVER_VERSION}`):k.info(`Bitcoin Computer Node is ready ${G.SERVER_VERSION}`);for await(const[,e]of t)await It(e)}catch(t){k.error(`ZMQ subscription failed with error '${t.message}'`)}})(kt)})();
